import { FC, useState } from "react";
import {
  AutoSizer as _AutoSizer,
  Table as _Table,
  Column as _Column,
  AutoSizerProps,
  TableProps,
  ColumnProps,
  SortDirection,
  SortDirectionType,
  TableHeaderRowProps,
} from "react-virtualized";
import { BadgeType, Vulnerability } from "../../types";
import { getTimeSince } from "../../utils/dates";
import { getRiskBadgeType, getRiskName } from "../../utils/riskMgr";
import Badge from "../Badge";
import clone from "clone";
import {
  ArrowTopRightOnSquareIcon,
  ChevronDownIcon,
  ChevronUpDownIcon,
  ChevronUpIcon,
} from "@heroicons/react/24/solid";
import OpenIcon from "../../assets/OpenIcon.png";

const Table = _Table as unknown as FC<TableProps>;
const AutoSizer = _AutoSizer as unknown as FC<AutoSizerProps>;
const Column = _Column as unknown as FC<ColumnProps>;

type VulnerabilityProperty =
  | "title"
  | "foundedDate"
  | "risk"
  | "affectedAssets"
  | "jiraUrl";

export default function VulnerabilityTable({
  data,
  selectedIds,
  toggleRowSelection,
  selectAll,
  deSelectAll,
}: {
  data: Array<Vulnerability>;
  selectedIds: { [id: string]: boolean };
  toggleRowSelection: (id: string) => void;
  selectAll: () => void;
  deSelectAll: () => void;
}) {
  const [sortBy, setSortBy] = useState<VulnerabilityProperty>("title");
  const [sortDirection, setSortDirection] = useState<
    SortDirectionType | undefined
  >(undefined);
  const [sortedData, setSortedData] = useState<Array<Vulnerability>>(
    clone(data)
  );
  const sortByNames = [
    "",
    "title",
    "foundedDate",
    "risk",
    "affectiveAssets",
    "jiraUrl",
  ];

  const toggleSortDirection = (columnName: VulnerabilityProperty) => {
    let newSortDirection: SortDirectionType | undefined = SortDirection.ASC;
    if (sortBy !== columnName) newSortDirection = SortDirection.ASC;
    else {
      if (!sortDirection) newSortDirection = SortDirection.ASC;
      else if (sortDirection === SortDirection.ASC)
        newSortDirection = SortDirection.DESC;
      else newSortDirection = undefined;
    }
    setSortDirection(newSortDirection);
    sort({ sortBy: columnName, sortDirection: newSortDirection });
  };

  const sort = ({
    sortBy,
    sortDirection,
  }: {
    sortBy: VulnerabilityProperty;
    sortDirection: SortDirectionType | undefined;
  }) => {
    if (sortDirection === undefined) setSortedData(clone(data));
    else {
      const sortedData = clone(data).sort(
        (a: Vulnerability, b: Vulnerability) => {
          if (typeof a[sortBy] === "string")
            return String(a[sortBy]).localeCompare(String(b[sortBy]));
          else if (Array.isArray(a[sortBy]))
            // @ts-ignore
            return a[sortBy].length - b[sortBy].length;
          // @ts-ignore
          return a[sortBy] - b[sortBy];
        }
      );
      if (sortDirection === SortDirection.DESC) sortedData.reverse();
      setSortedData(sortedData);
    }
  };

  return (
    <AutoSizer>
      {({ width, height }) => (
        <Table
          width={Math.max(width, 739)}
          height={height}
          headerHeight={48}
          rowHeight={80}
          rowCount={data.length}
          sortBy={sortBy}
          sortDirection={sortDirection}
          headerRowRenderer={({ columns, style }: TableHeaderRowProps) => {
            return (
              <>
                <div
                  className="box-border flex items-center py-2 px-4 text-xs text-[#A1A1AA] font-semibold"
                  style={style}
                  role="row"
                >
                  {columns.map((column: any, index: number) => {
                    const { children, style } = column.props;
                    return !index ? (
                      <div
                        key={column.key}
                        className="flex box-border justify-center items-center p-0 h-8"
                        style={style}
                        role="columnheader"
                      >
                        <input
                          type="checkbox"
                          className="w-4 h-4 pd-input hover:cursor-pointer"
                          checked={
                            Object.keys(selectedIds).filter(
                              (id: string) => selectedIds[id]
                            ).length === data.length
                          }
                          onChange={(e) =>
                            e.target.checked ? selectAll() : deSelectAll()
                          }
                        />
                      </div>
                    ) : (
                      <div
                        key={column.key}
                        className="flex box-border items-center py-2 px-4 gap-2"
                        style={{
                          ...style,
                          flex: index === 1 ? 3 : 1,
                          msFlex: index === 1 ? 3 : 1,
                          WebkitFlex: index === 1 ? 3 : 1,
                        }}
                        role="columnheader"
                      >
                        <span
                          className="flex hover:cursor-pointer"
                          onClick={() => {
                            setSortBy(
                              sortByNames[index] as VulnerabilityProperty
                            );
                            toggleSortDirection(
                              sortByNames[index] as VulnerabilityProperty
                            );
                          }}
                        >
                          {children[0].props.title}
                          <div className="flex justify-center w-4 ml-2">
                            {sortBy === sortByNames[index] &&
                            sortDirection === SortDirection.ASC ? (
                              <ChevronUpIcon width={10} />
                            ) : sortBy === sortByNames[index] &&
                              sortDirection === SortDirection.DESC ? (
                              <ChevronDownIcon width={10} />
                            ) : (
                              <ChevronUpDownIcon width={16} />
                            )}
                          </div>
                        </span>
                      </div>
                    );
                  })}
                </div>
                <div
                  className="w-full h-px bg-[radial-gradient(var(--tw-gradient-stops))] from-[#27272A] to-[#0A0A0A]"
                  style={{ width: style.width }}
                ></div>
              </>
            );
          }}
          rowGetter={({ index }) => sortedData[index]}
          rowRenderer={({ index, columns, style, rowData, onRowClick }) => {
            return (
              <div
                key={rowData.id}
                className="transition ease-in-out duration-300 flex items-center py-2 px-4 h-20 hover:bg-[#18181B] hover:cursor-pointer text-xs font-medium outline outline-1 outline-transparent hover:outline-[#27272A] rounded-[4px]"
                style={style}
                onClick={(e) =>
                  onRowClick ? onRowClick({ event: e, index, rowData }) : {}
                }
              >
                {columns.map((column, index) => {
                  const { style: oldStyle } = column.props;
                  const style = {
                    ...oldStyle,
                    flex: index === 1 ? 3 : 1,
                    msFlex: index === 1 ? 3 : 1,
                    WebkitFlex: index === 1 ? 3 : 1,
                  };
                  return index === 0 ? (
                    <div
                      key={column.key}
                      className="flex justify-center items-center p-0 w-8 h-8"
                      style={style}
                    >
                      <input
                        readOnly
                        type="checkbox"
                        className="w-4 h-4 pd-input"
                        checked={!!selectedIds[rowData.id]}
                      />
                    </div>
                  ) : (
                    <div
                      key={column.key}
                      className="flex flex-col justify-center items-start px-4 gap-2 h-16"
                      style={style}
                    >
                      {index === 1 ? (
                        <div className="w-full overflow-hidden">
                          <span className="whitespace-nowrap">
                            {rowData.title}
                          </span>
                          <div className="flex items-center p-0 gap-3 mt-2">
                            {rowData.activity && (
                              <Badge
                                type={BadgeType.GRAY}
                                className="px-1.5 py-[3px]"
                              >
                                <div className="flex items-end p-0 gap-[3px] h-4">
                                  {[1, 2, 3, 4].map((index) => (
                                    <div
                                      key={index}
                                      className={`border-box w-0.5 ${
                                        index === 1
                                          ? "h-[5px]"
                                          : index === 2
                                          ? "h-[8px]"
                                          : index === 3
                                          ? "h-[11px]"
                                          : "h-[14px]"
                                      } ${
                                        rowData.activity >= index
                                          ? "bg-[#6366F1]"
                                          : "bg-transparent"
                                      }`}
                                    ></div>
                                  ))}
                                </div>
                              </Badge>
                            )}
                            {rowData.tags.map((tag: string) => (
                              <Badge
                                key={tag}
                                type={BadgeType.GRAY}
                                className="px-2 py-[3px]"
                              >
                                <span className="text-xs whitespace-nowrap">
                                  {tag}
                                </span>
                              </Badge>
                            ))}
                          </div>
                        </div>
                      ) : index === 2 ? (
                        <div className="w-full overflow-hidden whitespace-nowrap text-ellipsis">
                          {getTimeSince(rowData.foundedDate)}
                        </div>
                      ) : index === 3 ? (
                        <Badge
                          type={getRiskBadgeType(rowData.risk)}
                          className="py-px px-3"
                        >
                          {getRiskName(rowData.risk)}
                        </Badge>
                      ) : index === 4 ? (
                        <div className="pl-10">
                          <Badge
                            type={BadgeType.GRAY}
                            className="px-0.5 py-px text-[#FAFAFA]"
                          >
                            {rowData.affectedAssets.length}
                          </Badge>
                        </div>
                      ) : index === 5 ? (
                        <>
                          {rowData.jiraUrl ? (
                            <Badge
                              type={BadgeType.GRAY}
                              className="px-3 pl-2.5 py-[3px] text-[#FAFAFA] font-semibold hover:bg-[#37373A]"
                              onClick={() =>
                                (window.location.href = rowData.jiraUrl)
                              }
                            >
                              <img src={OpenIcon} />
                              <span>Open Jira</span>
                            </Badge>
                          ) : (
                            <Badge
                              type={BadgeType.BLUE}
                              className="px-3 py-[3px] text-[#FAFAFA] font-semibold hover:bg-[#363272]"
                            >
                              <ArrowTopRightOnSquareIcon width={16} />
                              <span>Create Jira</span>
                            </Badge>
                          )}
                        </>
                      ) : (
                        <></>
                      )}
                    </div>
                  );
                })}
              </div>
            );
          }}
          onRowClick={({ rowData }) => toggleRowSelection(rowData.id)}
        >
          <Column
            label="Check Box"
            dataKey="isSelected"
            width={32}
            minWidth={32}
            maxWidth={32}
          />
          <Column
            label="Vulnerability"
            dataKey="title"
            width={250}
            minWidth={250}
          />
          <Column
            label="Date Found"
            dataKey="foundedDate"
            width={125}
            minWidth={125}
          />
          <Column label="Risk" dataKey="risk" width={90} minWidth={90} />
          <Column
            label="Affected Assets"
            dataKey="affectedAssets"
            width={150}
            minWidth={150}
          />
          <Column label="Status" dataKey="jira" width={150} minWidth={150} />
        </Table>
      )}
    </AutoSizer>
  );
}
